//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Player/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""P_Controls"",
            ""id"": ""63c22add-de49-427e-8758-bb0ecc34f845"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""f706edc8-ab94-47ff-8a28-23a47735b376"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""05e5a309-fae5-4f47-b494-1ebf7f452d5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftDrift"",
                    ""type"": ""Button"",
                    ""id"": ""55550699-15a2-4486-977f-f58045e29887"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightDrift"",
                    ""type"": ""Button"",
                    ""id"": ""729e83cc-7396-4a2c-9b4c-7a1a497d2c3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc3f760b-6885-40c7-a4b4-6fa9a279ce6f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""28075a35-14df-445f-865d-e9012830ceb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9909f605-4dbc-4240-a167-5f9fb13430f5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3e74ca7-703c-4cb2-b8a6-e4c3725b58a5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd7f6f98-b3f9-49c9-b733-5040a9b827ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""25c5ad6a-02d1-4a6d-8cb7-a288fc87962b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""69bd714d-f1a9-4226-82be-8e8fdb5ca3c1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f24c9ea2-7c9e-4da8-a060-a008ede30f76"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1271954f-a9b3-4fca-8ec9-37d50e22abc9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDrift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e59a810d-3a85-4383-b14c-a4d798dd7f18"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDrift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d28d64de-7871-4255-a7a6-2578f783ef30"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDrift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caf53e54-ff29-4de7-88e3-fb775d1291d5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDrift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameManager"",
            ""id"": ""20f524ed-da63-4f64-b2c5-7607871007ef"",
            ""actions"": [
                {
                    ""name"": ""Pause Game"",
                    ""type"": ""Button"",
                    ""id"": ""000339c8-8da2-498e-83ac-f309ca317f0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart_1"",
                    ""type"": ""Button"",
                    ""id"": ""22dafb84-7820-49e5-8f69-3853f7d0d61d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart_2"",
                    ""type"": ""Button"",
                    ""id"": ""9e6930a7-93b8-426c-9ab3-09fad61bd175"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart_3"",
                    ""type"": ""Button"",
                    ""id"": ""196c95cf-8d2e-471b-97be-87452d660d9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart_4"",
                    ""type"": ""Button"",
                    ""id"": ""c7a298b7-cb49-4798-afbd-b624df87fdd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3bf19ab9-77a6-4eae-bf13-28f87c8d6d27"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6f58a04-e9f7-460c-a0fb-3ea834b40b19"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1cec2e-e794-4875-945d-3954510e6ce8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""860230e6-74bf-419c-8d74-2dd604f9a10b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3ab72c3-e625-47d2-b87e-bc137e9303cb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15e14650-0796-4ea3-a507-beb90ec8ad5a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60db78af-cd07-4723-9d88-467c443e1ddc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""392cfbf1-599e-4b69-9d7d-680c908dc91e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a330264b-d43a-4c9c-b085-dc9830cedca3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b9812e-2b7f-4d72-903c-22600ef4675c"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // P_Controls
        m_P_Controls = asset.FindActionMap("P_Controls", throwIfNotFound: true);
        m_P_Controls_Steer = m_P_Controls.FindAction("Steer", throwIfNotFound: true);
        m_P_Controls_Jump = m_P_Controls.FindAction("Jump", throwIfNotFound: true);
        m_P_Controls_LeftDrift = m_P_Controls.FindAction("LeftDrift", throwIfNotFound: true);
        m_P_Controls_RightDrift = m_P_Controls.FindAction("RightDrift", throwIfNotFound: true);
        // GameManager
        m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
        m_GameManager_PauseGame = m_GameManager.FindAction("Pause Game", throwIfNotFound: true);
        m_GameManager_Restart_1 = m_GameManager.FindAction("Restart_1", throwIfNotFound: true);
        m_GameManager_Restart_2 = m_GameManager.FindAction("Restart_2", throwIfNotFound: true);
        m_GameManager_Restart_3 = m_GameManager.FindAction("Restart_3", throwIfNotFound: true);
        m_GameManager_Restart_4 = m_GameManager.FindAction("Restart_4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // P_Controls
    private readonly InputActionMap m_P_Controls;
    private List<IP_ControlsActions> m_P_ControlsActionsCallbackInterfaces = new List<IP_ControlsActions>();
    private readonly InputAction m_P_Controls_Steer;
    private readonly InputAction m_P_Controls_Jump;
    private readonly InputAction m_P_Controls_LeftDrift;
    private readonly InputAction m_P_Controls_RightDrift;
    public struct P_ControlsActions
    {
        private @PlayerInput m_Wrapper;
        public P_ControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_P_Controls_Steer;
        public InputAction @Jump => m_Wrapper.m_P_Controls_Jump;
        public InputAction @LeftDrift => m_Wrapper.m_P_Controls_LeftDrift;
        public InputAction @RightDrift => m_Wrapper.m_P_Controls_RightDrift;
        public InputActionMap Get() { return m_Wrapper.m_P_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(P_ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IP_ControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_P_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_P_ControlsActionsCallbackInterfaces.Add(instance);
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LeftDrift.started += instance.OnLeftDrift;
            @LeftDrift.performed += instance.OnLeftDrift;
            @LeftDrift.canceled += instance.OnLeftDrift;
            @RightDrift.started += instance.OnRightDrift;
            @RightDrift.performed += instance.OnRightDrift;
            @RightDrift.canceled += instance.OnRightDrift;
        }

        private void UnregisterCallbacks(IP_ControlsActions instance)
        {
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LeftDrift.started -= instance.OnLeftDrift;
            @LeftDrift.performed -= instance.OnLeftDrift;
            @LeftDrift.canceled -= instance.OnLeftDrift;
            @RightDrift.started -= instance.OnRightDrift;
            @RightDrift.performed -= instance.OnRightDrift;
            @RightDrift.canceled -= instance.OnRightDrift;
        }

        public void RemoveCallbacks(IP_ControlsActions instance)
        {
            if (m_Wrapper.m_P_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IP_ControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_P_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_P_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public P_ControlsActions @P_Controls => new P_ControlsActions(this);

    // GameManager
    private readonly InputActionMap m_GameManager;
    private List<IGameManagerActions> m_GameManagerActionsCallbackInterfaces = new List<IGameManagerActions>();
    private readonly InputAction m_GameManager_PauseGame;
    private readonly InputAction m_GameManager_Restart_1;
    private readonly InputAction m_GameManager_Restart_2;
    private readonly InputAction m_GameManager_Restart_3;
    private readonly InputAction m_GameManager_Restart_4;
    public struct GameManagerActions
    {
        private @PlayerInput m_Wrapper;
        public GameManagerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_GameManager_PauseGame;
        public InputAction @Restart_1 => m_Wrapper.m_GameManager_Restart_1;
        public InputAction @Restart_2 => m_Wrapper.m_GameManager_Restart_2;
        public InputAction @Restart_3 => m_Wrapper.m_GameManager_Restart_3;
        public InputAction @Restart_4 => m_Wrapper.m_GameManager_Restart_4;
        public InputActionMap Get() { return m_Wrapper.m_GameManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
        public void AddCallbacks(IGameManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Add(instance);
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
            @Restart_1.started += instance.OnRestart_1;
            @Restart_1.performed += instance.OnRestart_1;
            @Restart_1.canceled += instance.OnRestart_1;
            @Restart_2.started += instance.OnRestart_2;
            @Restart_2.performed += instance.OnRestart_2;
            @Restart_2.canceled += instance.OnRestart_2;
            @Restart_3.started += instance.OnRestart_3;
            @Restart_3.performed += instance.OnRestart_3;
            @Restart_3.canceled += instance.OnRestart_3;
            @Restart_4.started += instance.OnRestart_4;
            @Restart_4.performed += instance.OnRestart_4;
            @Restart_4.canceled += instance.OnRestart_4;
        }

        private void UnregisterCallbacks(IGameManagerActions instance)
        {
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
            @Restart_1.started -= instance.OnRestart_1;
            @Restart_1.performed -= instance.OnRestart_1;
            @Restart_1.canceled -= instance.OnRestart_1;
            @Restart_2.started -= instance.OnRestart_2;
            @Restart_2.performed -= instance.OnRestart_2;
            @Restart_2.canceled -= instance.OnRestart_2;
            @Restart_3.started -= instance.OnRestart_3;
            @Restart_3.performed -= instance.OnRestart_3;
            @Restart_3.canceled -= instance.OnRestart_3;
            @Restart_4.started -= instance.OnRestart_4;
            @Restart_4.performed -= instance.OnRestart_4;
            @Restart_4.canceled -= instance.OnRestart_4;
        }

        public void RemoveCallbacks(IGameManagerActions instance)
        {
            if (m_Wrapper.m_GameManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameManagerActions @GameManager => new GameManagerActions(this);
    public interface IP_ControlsActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLeftDrift(InputAction.CallbackContext context);
        void OnRightDrift(InputAction.CallbackContext context);
    }
    public interface IGameManagerActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
        void OnRestart_1(InputAction.CallbackContext context);
        void OnRestart_2(InputAction.CallbackContext context);
        void OnRestart_3(InputAction.CallbackContext context);
        void OnRestart_4(InputAction.CallbackContext context);
    }
}
